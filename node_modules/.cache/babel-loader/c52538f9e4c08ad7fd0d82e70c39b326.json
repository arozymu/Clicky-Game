{"ast":null,"code":"var _jsxFileName = \"/Users/annarozymuradov/Desktop/HW/Clicky-Game/src/App.js\";\nimport React, { Component } from \"react\";\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on a soccer player to gain points! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      matches,\n      correctGuesses,\n      bestScore,\n      clickMessage\n    };\n\n    this.setClicked = id => {\n      // Make a copy of the state matches array to work with\n      const matches = this.state.matches; // Filter for the clicked match\n\n      const clickedMatch = matches.filter(match => match.id === id); // If the matched image's clicked value is already true, \n      // do the game over actions\n\n      if (clickedMatch[0].clicked) {\n        console.log(\"Correct Guesses: \" + correctGuesses);\n        console.log(\"Best Score: \" + bestScore);\n        correctGuesses = 0;\n        clickMessage = \"Second click.\";\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        }\n\n        this.setState({\n          clickMessage\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          matches\n        }); // Otherwise, if clicked = false, and the user hasn't finished\n      } else if (correctGuesses < 11) {\n        // Set its value to true\n        clickedMatch[0].clicked = true; // increment the appropriate counter\n\n        correctGuesses++;\n        clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n        if (correctGuesses > bestScore) {\n          bestScore = correctGuesses;\n          this.setState({\n            bestScore\n          });\n        } // Shuffle the array to be rendered in a random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      } else {\n        // Set its value to true\n        clickedMatch[0].clicked = true; // restart the guess counter\n\n        correctGuesses = 0; // the user to play again\n\n        clickMessage = \"100% lets try again\";\n        bestScore = 12;\n        this.setState({\n          bestScore\n        });\n\n        for (let i = 0; i < matches.length; i++) {\n          matches[i].clicked = false;\n        } // Shuffle the array to be rendered in a random order\n\n\n        matches.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); // Set this.state.matches equal to the new matches array\n\n        this.setState({\n          matches\n        });\n        this.setState({\n          correctGuesses\n        });\n        this.setState({\n          clickMessage\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Click Soccer Player\"), React.createElement(\"h3\", {\n      className: \"scoreSummary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.clickMessage), React.createElement(\"h3\", {\n      className: \"scoreSummary card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Correct Guesses: \", this.state.correctGuesses, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), \"Best Score: \", this.state.bestScore), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.matches.map(match => React.createElement(MatchCard, {\n      setClicked: this.setClicked,\n      id: match.id,\n      key: match.id,\n      image: match.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/annarozymuradov/Desktop/HW/Clicky-Game/src/App.js"],"names":["React","Component","MatchCard","Wrapper","Title","matches","correctGuesses","bestScore","clickMessage","App","state","setClicked","id","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","render","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on a soccer player to gain points! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n\n  // Setting this.state.matches to the matches json array\n  state = {\n    matches,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  setClicked = id => {\n\n    // Make a copy of the state matches array to work with\n    const matches = this.state.matches;\n\n    // Filter for the clicked match\n    const clickedMatch = matches.filter(match => match.id === id);\n\n    // If the matched image's clicked value is already true, \n    // do the game over actions\n    if (clickedMatch[0].clicked) {\n\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Second click.\"\n\n      for (let i = 0; i < matches.length; i++) {\n        matches[i].clicked = false;\n      }\n\n      this.setState({ clickMessage });\n      this.setState({ correctGuesses });\n      this.setState({ matches });\n\n      // Otherwise, if clicked = false, and the user hasn't finished\n    } else if (correctGuesses < 11) {\n\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // increment the appropriate counter\n      correctGuesses++;\n\n      clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n      if (correctGuesses > bestScore) {\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n      }\n\n      // Shuffle the array to be rendered in a random order\n      matches.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // Set this.state.matches equal to the new matches array\n      this.setState({ matches });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    } else {\n\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // restart the guess counter\n      correctGuesses = 0;\n\n      // the user to play again\n      clickMessage = \"100% lets try again\";\n      bestScore = 12;\n      this.setState({ bestScore });\n\n      for (let i = 0; i < matches.length; i++) {\n        matches[i].clicked = false;\n      }\n\n      // Shuffle the array to be rendered in a random order\n      matches.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // Set this.state.matches equal to the new matches array\n      this.setState({ matches });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Click Soccer Player</Title>\n\n        <h3 className=\"scoreSummary\">\n          {this.state.clickMessage}\n        </h3>\n\n        <h3 className=\"scoreSummary card-header\">\n          Correct Guesses: {this.state.correctGuesses}\n          <br />\n          Best Score: {this.state.bestScore}\n        </h3>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.matches.map(match => (\n              <MatchCard\n                setClicked={this.setClicked}\n                id={match.id}\n                key={match.id}\n                image={match.image}\n              />\n            ))}\n          </div>\n        </div>\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}